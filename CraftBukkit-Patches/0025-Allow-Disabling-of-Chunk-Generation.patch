From 46eb707b72c511c690f4aea62a935485d48f03c7 Mon Sep 17 00:00:00 2001
From: Poweruser <poweruser.rs@hotmail.com>
Date: Sun, 22 Mar 2015 12:26:03 +0100
Subject: [PATCH] Allow Disabling of Chunk Generation


diff --git a/src/main/java/de/minetick/MinetickEmptyChunk.java b/src/main/java/de/minetick/MinetickEmptyChunk.java
new file mode 100644
index 0000000..ee06944
--- /dev/null
+++ b/src/main/java/de/minetick/MinetickEmptyChunk.java
@@ -0,0 +1,105 @@
+package de.minetick;
+
+import com.google.common.base.Predicate;
+import java.util.List;
+import java.util.Random;
+
+import net.minecraft.server.AxisAlignedBB;
+import net.minecraft.server.Block;
+import net.minecraft.server.Blocks;
+import net.minecraft.server.BlockPosition;
+import net.minecraft.server.Chunk;
+import net.minecraft.server.Entity;
+import net.minecraft.server.EnumSkyBlock;
+import net.minecraft.server.IChunkProvider;
+import net.minecraft.server.TileEntity;
+import net.minecraft.server.World;
+
+public class MinetickEmptyChunk extends Chunk {
+
+    public MinetickEmptyChunk(World world, int i, int j) {
+        super(world, i, j);
+        this.lit = true;
+        this.done = true;
+    }
+
+    public boolean a(int i, int j) {
+        return i == this.locX && j == this.locZ;
+    }
+
+    public int b(int i, int j) {
+        return 1;
+    }
+
+    public void initLighting() {}
+
+    public Block getType(BlockPosition blockposition) {
+        return Blocks.AIR;
+    }
+
+    public int b(BlockPosition blockposition) {
+        return 255;
+    }
+
+    public int c(BlockPosition blockposition) {
+        return 0;
+    }
+
+    public int getBrightness(EnumSkyBlock enumskyblock, BlockPosition blockposition) {
+        return enumskyblock.c;
+    }
+
+    public void a(EnumSkyBlock enumskyblock, BlockPosition blockposition, int i) {}
+
+    public int a(BlockPosition blockposition, int i) {
+        return 0;
+    }
+
+    public void a(Entity entity) {}
+
+    public void b(Entity entity) {}
+
+    public void a(Entity entity, int i) {}
+
+    public boolean d(BlockPosition blockposition) {
+        return false;
+    }
+
+    public TileEntity a(BlockPosition blockposition, Chunk.EnumTileEntityState chunk_enumtileentitystate) {
+        return null;
+    }
+
+    public void a(TileEntity tileentity) {}
+
+    public void a(BlockPosition blockposition, TileEntity tileentity) {}
+
+    public void e(BlockPosition blockposition) {}
+
+    public void addEntities() {}
+
+    public void removeEntities() {}
+
+    public void e() {}
+
+    public void a(Entity entity, AxisAlignedBB axisalignedbb, List<Entity> list, Predicate<? super Entity> predicate) {}
+
+    public <T extends Entity> void a(Class<? extends T> oclass, AxisAlignedBB axisalignedbb, List<T> list, Predicate<? super T> predicate) {}
+
+    public boolean a(boolean flag) {
+        return false;
+    }
+
+    public Random a(long i) {
+        return new Random(this.getWorld().getSeed() + (long) (this.locX * this.locX * 4987142) + (long) (this.locX * 5947611) + (long) (this.locZ * this.locZ) * 4392871L + (long) (this.locZ * 389711) ^ i);
+    }
+
+    public boolean isEmpty() {
+        return true;
+    }
+
+    public boolean c(int i, int j) {
+        return true;
+    }
+
+    public void loadNearby(IChunkProvider ichunkprovider, IChunkProvider ichunkprovider1, int i, int j) {}
+}
diff --git a/src/main/java/de/minetick/MinetickMod.java b/src/main/java/de/minetick/MinetickMod.java
index 5572950..4a6a555 100644
--- a/src/main/java/de/minetick/MinetickMod.java
+++ b/src/main/java/de/minetick/MinetickMod.java
@@ -5,6 +5,7 @@ import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.util.Collections;
+import java.util.HashSet;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.concurrent.Callable;
@@ -44,12 +45,14 @@ public class MinetickMod {
     private List<Integer> ticksPerSecond;
     private int ticksCounter = 0;
     private final Logger log = LogManager.getLogger();
+    private HashSet<String> notGeneratingWorlds;
 
     public MinetickMod() {
         this.tickTimerObject = new TickTimer();
         this.tickCounterObject = new TickCounter();
         this.ticksPerSecond = Collections.synchronizedList(new LinkedList<Integer>());
         this.timerService.scheduleAtFixedRate(this.tickCounterObject, 1, 1, TimeUnit.SECONDS);
+        this.notGeneratingWorlds = new HashSet<String>();
         instance = this;
         try {
             this.mainConfig = new MinetickModConfig(new File("minetickmod.yml"));
@@ -73,6 +76,11 @@ public class MinetickMod {
             craftserver.getCommandMap().register("tps", "MinetickMod", new TPSCommand("tps"));
             craftserver.getCommandMap().register("minetickmod-reload", "MinetickMod", new ReloadSettingsCommand("minetickmod-reload"));
             this.profiler = new Profiler(this.mainConfig.getProfilerLogInterval(), this.mainConfig.getProfilerWriteEnabled(), this.mainConfig.getProfilerWriteInterval());
+
+            List<String> worlds = craftserver.getMinetickModNotGeneratingWorlds();
+            for(String w: worlds) {
+                this.notGeneratingWorlds.add(w.toLowerCase());
+            }
         }
     }
 
@@ -191,4 +199,11 @@ public class MinetickMod {
             return null;
         }
     }
+
+    public static boolean doesWorldNotGenerateChunks(String worldName) {
+        if(instance != null) {
+            return instance.notGeneratingWorlds.contains(worldName.toLowerCase());
+        }
+        return false;
+    }
 }
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 3923cd1..90cdac4 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -32,8 +32,8 @@ public class Chunk {
     private boolean k;
     public final Map<BlockPosition, TileEntity> tileEntities;
     public final EntitySlice<Entity>[] entitySlices; // CraftBukkit - public
-    private boolean done;
-    private boolean lit;
+    protected boolean done; // MinetickMod - protected
+    protected boolean lit; //MinetickMod - protected
     private boolean p;
     private boolean q;
     private boolean r;
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 22c3906..ebbd517 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
+
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -23,6 +24,11 @@ import org.bukkit.craftbukkit.util.LongObjectHashMap;
 import org.bukkit.event.world.ChunkUnloadEvent;
 // CraftBukkit end
 
+// MinetickMod start
+import de.minetick.MinetickEmptyChunk;
+import de.minetick.MinetickMod;
+// MinetickMod end
+
 public class ChunkProviderServer implements IChunkProvider {
 
     private static final Logger b = LogManager.getLogger();
@@ -34,8 +40,13 @@ public class ChunkProviderServer implements IChunkProvider {
     public LongObjectHashMap<Chunk> chunks = new LongObjectHashMap<Chunk>();
     public WorldServer world; // CraftBukkit - public
 
+    // MinetickMod start
+    private MinetickEmptyChunk mtEmptyChunk;
+    // MinetickMod end
+
     public ChunkProviderServer(WorldServer worldserver, IChunkLoader ichunkloader, IChunkProvider ichunkprovider) {
         this.emptyChunk = new EmptyChunk(worldserver, Integer.MIN_VALUE, Integer.MIN_VALUE); // MinetickMod
+        this.mtEmptyChunk = new MinetickEmptyChunk(worldserver, Integer.MIN_VALUE, Integer.MIN_VALUE); // MinetickMod
         this.world = worldserver;
         this.chunkLoader = ichunkloader;
         this.chunkProvider = ichunkprovider;
@@ -136,6 +147,10 @@ public class ChunkProviderServer implements IChunkProvider {
             if (chunk == null) {
                 if (this.chunkProvider == null) {
                     chunk = this.emptyChunk;
+                // MinetickMod start
+                } else if (MinetickMod.doesWorldNotGenerateChunks(this.world.getWorld().getName())) {
+                    return this.mtEmptyChunk;
+                // MinetickMod end
                 } else {
                     try {
                         chunk = this.chunkProvider.getOrCreateChunk(i, j);
@@ -194,7 +209,7 @@ public class ChunkProviderServer implements IChunkProvider {
 
         chunk = chunk == null ? (!this.world.ad() && !this.forceChunkLoad ? this.emptyChunk : this.getChunkAt(i, j)) : chunk;
 
-        if (chunk == emptyChunk) return chunk;
+        if (chunk == emptyChunk || chunk == this.mtEmptyChunk) return chunk; // MinetickMod
         if (i != chunk.locX || j != chunk.locZ) {
             b.error("Chunk (" + chunk.locX + ", " + chunk.locZ + ") stored at  (" + i + ", " + j + ") in world '" + world.getWorld().getName() + "'");
             b.error(chunk.getClass().getName());
@@ -230,7 +245,7 @@ public class ChunkProviderServer implements IChunkProvider {
     }
 
     public void saveChunkNOP(Chunk chunk) { // CraftBukkit - public
-        if (this.chunkLoader != null) {
+        if (this.chunkLoader != null && !chunk.isEmpty()) { // MinetickMod - dont save empty chunks
             try {
                 this.chunkLoader.b(this.world, chunk);
             } catch (Exception exception) {
@@ -241,7 +256,7 @@ public class ChunkProviderServer implements IChunkProvider {
     }
 
     public void saveChunk(Chunk chunk) { // CraftBukkit - public
-        if (this.chunkLoader != null) {
+        if (this.chunkLoader != null && !chunk.isEmpty()) { // MinetickMod - dont save empty chunks
             try {
                 chunk.setLastSaved(this.world.getTime());
                 this.chunkLoader.a(this.world, chunk);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 629e6b8..1e06d63 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1642,4 +1642,10 @@ public final class CraftServer implements Server {
     public UnsafeValues getUnsafe() {
         return CraftMagicNumbers.INSTANCE;
     }
+
+    // MinetickMod start
+    public List<String> getMinetickModNotGeneratingWorlds() {
+        return configuration.getStringList("minetickmod.notGeneratingWorlds");
+    }
+    // MinetickMod end
 }
diff --git a/src/main/resources/configurations/bukkit.yml b/src/main/resources/configurations/bukkit.yml
index a6c1178..a8499d0 100644
--- a/src/main/resources/configurations/bukkit.yml
+++ b/src/main/resources/configurations/bukkit.yml
@@ -44,3 +44,5 @@ database:
     driver: org.sqlite.JDBC
     password: walrus
     url: jdbc:sqlite:{DIR}{NAME}.db
+minetickmod:
+    notGeneratingWorlds: []
-- 
1.8.3.msysgit.0

