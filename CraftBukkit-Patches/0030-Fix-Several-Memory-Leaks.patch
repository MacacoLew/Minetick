From c109ca36b7d5093b79ac061ad95bced95b8d47fe Mon Sep 17 00:00:00 2001
From: Poweruser <poweruser.rs@hotmail.com>
Date: Tue, 24 Mar 2015 11:07:30 +0100
Subject: [PATCH] Fix Several Memory Leaks


diff --git a/src/main/java/net/minecraft/server/BlockRedstoneTorch.java b/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
index 125cefe..e86d503 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
@@ -10,7 +10,7 @@ import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
 
 public class BlockRedstoneTorch extends BlockTorch {
 
-    private static Map<World, List<BlockRedstoneTorch.RedstoneUpdateInfo>> b = Maps.newHashMap();
+    private static Map<World, List<BlockRedstoneTorch.RedstoneUpdateInfo>> b = new java.util.WeakHashMap(); // MinetickMod
     private final boolean isOn;
 
     private boolean a(World world, BlockPosition blockposition, boolean flag) {
diff --git a/src/main/java/net/minecraft/server/EnchantmentManager.java b/src/main/java/net/minecraft/server/EnchantmentManager.java
index 9865681..da8b470 100644
--- a/src/main/java/net/minecraft/server/EnchantmentManager.java
+++ b/src/main/java/net/minecraft/server/EnchantmentManager.java
@@ -169,6 +169,10 @@ public class EnchantmentManager {
             a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.d, entityliving.bA());
         }
 
+        // MinetickMod start
+        EnchantmentManager.d.a = null;
+        EnchantmentManager.d.b = null;
+        // MinetickMod end
     }
 
     public static void b(EntityLiving entityliving, Entity entity) {
@@ -182,6 +186,10 @@ public class EnchantmentManager {
             a((EnchantmentManager.EnchantmentModifier) EnchantmentManager.e, entityliving.bA());
         }
 
+        // MinetickMod start
+        EnchantmentManager.e.a = null;
+        EnchantmentManager.e.b = null;
+        // MinetickMod end
     }
 
     public static int a(EntityLiving entityliving) {
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index 5df280c..fbf801c 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import java.lang.ref.WeakReference; // MinetickMod
 import java.util.Iterator;
 import java.util.List;
 import java.util.UUID;
@@ -26,7 +27,7 @@ public abstract class EntityInsentient extends EntityLiving {
     protected NavigationAbstract navigation;
     public PathfinderGoalSelector goalSelector; // CraftBukkit - public
     public PathfinderGoalSelector targetSelector; // CraftBukkit - public
-    private EntityLiving goalTarget;
+    private WeakReference<EntityLiving> goalTarget = new WeakReference<EntityLiving>(null); // MinetickMod
     private EntitySenses bk;
     private ItemStack[] equipment = new ItemStack[5];
     public float[] dropChances = new float[5]; // CraftBukkit - public
@@ -86,7 +87,7 @@ public abstract class EntityInsentient extends EntityLiving {
     }
 
     public EntityLiving getGoalTarget() {
-        return this.goalTarget;
+        return this.goalTarget.get(); // MinetickMod
     }
 
     public void setGoalTarget(EntityLiving entityliving) {
@@ -119,7 +120,7 @@ public abstract class EntityInsentient extends EntityLiving {
                 entityliving = null;
             }
         }
-        this.goalTarget = entityliving;
+        this.goalTarget = new WeakReference<EntityLiving>(entityliving); // MinetickMod
         // CraftBukkit end
     }
 
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index cd67d2b..ef6593e 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -230,6 +230,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
     }
 
     public void close(IChatBaseComponent ichatbasecomponent) {
+        this.i.clear(); // MinetickMod
         if (this.channel.isOpen()) {
             this.channel.close(); // We can't wait as this may be called from an event loop.
             this.n = ichatbasecomponent;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalSwell.java b/src/main/java/net/minecraft/server/PathfinderGoalSwell.java
index c8eebf8..5d2119d 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalSwell.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalSwell.java
@@ -3,7 +3,7 @@ package net.minecraft.server;
 public class PathfinderGoalSwell extends PathfinderGoal {
 
     EntityCreeper a;
-    EntityLiving b;
+    // EntityLiving b; // MinetickMod
 
     public PathfinderGoalSwell(EntityCreeper entitycreeper) {
         this.a = entitycreeper;
@@ -18,19 +18,22 @@ public class PathfinderGoalSwell extends PathfinderGoal {
 
     public void c() {
         this.a.getNavigation().n();
-        this.b = this.a.getGoalTarget();
+        // this.b = this.a.getGoalTarget(); // MinetickMod
     }
 
     public void d() {
-        this.b = null;
+        // this.b = null; // MinetickMod
     }
 
     public void e() {
-        if (this.b == null) {
+        // MinetickMod start
+        EntityLiving b = this.a.getGoalTarget();
+        if (b == null) {
             this.a.a(-1);
-        } else if (this.a.h(this.b) > 49.0D) {
+        } else if (this.a.h(b) > 49.0D) {
             this.a.a(-1);
-        } else if (!this.a.getEntitySenses().a(this.b)) {
+        } else if (!this.a.getEntitySenses().a(b)) {
+        // MinetickMod end
             this.a.a(-1);
         } else {
             this.a.a(1);
diff --git a/src/main/java/net/minecraft/server/PersistentCollection.java b/src/main/java/net/minecraft/server/PersistentCollection.java
index 7890079..54d866d 100644
--- a/src/main/java/net/minecraft/server/PersistentCollection.java
+++ b/src/main/java/net/minecraft/server/PersistentCollection.java
@@ -178,4 +178,15 @@ public class PersistentCollection {
             return oshort.shortValue();
         }
     }
+
+    // MinetickMod start
+    public void removeTrackedPlayer(EntityHuman entityhuman) {
+        for(Object o: this.c) {
+            if(o instanceof WorldMap) {
+                WorldMap map = (WorldMap) o;
+                map.untrackPlayer(entityhuman);
+            }
+        }
+    }
+    // MinetickMod end
 }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 0d602ef..5c821bd 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1039,6 +1039,7 @@ public abstract class World implements IBlockAccess {
         entity.die();
         if (entity instanceof EntityHuman) {
             this.players.remove(entity);
+            this.worldMaps.removeTrackedPlayer((EntityHuman) entity); // MinetickMod
             this.everyoneSleeping();
             this.b(entity);
         }
diff --git a/src/main/java/net/minecraft/server/WorldMap.java b/src/main/java/net/minecraft/server/WorldMap.java
index 0e03164..0302a6e 100644
--- a/src/main/java/net/minecraft/server/WorldMap.java
+++ b/src/main/java/net/minecraft/server/WorldMap.java
@@ -309,4 +309,18 @@ public class WorldMap extends PersistentBase {
 
         }
     }
+
+    // MinetickMod start
+    public void untrackPlayer(EntityHuman entityhuman) {
+        if(this.i.containsKey(entityhuman)) {
+            this.i.remove(entityhuman);
+            java.util.Iterator<WorldMapHumanTracker> iter = (java.util.Iterator<WorldMapHumanTracker>) this.g.iterator();
+            while(iter.hasNext()) {
+                if(iter.next().trackee == entityhuman) {
+                    iter.remove();
+                }
+            }
+        }
+    }
+    // MinetickMod end
 }
-- 
1.8.3.msysgit.0

