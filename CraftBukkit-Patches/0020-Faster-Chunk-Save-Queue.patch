From 431beb2c943966f0aaf81c9e4f6d40c09c355813 Mon Sep 17 00:00:00 2001
From: Poweruser <poweruser.rs@hotmail.com>
Date: Sun, 22 Mar 2015 03:45:21 +0100
Subject: [PATCH] Faster Chunk Save Queue


diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
index 24cd6ff..73f4fd8 100644
--- a/src/main/java/net/minecraft/server/ChunkRegionLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -16,8 +16,7 @@ import org.apache.logging.log4j.Logger;
 public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
 
     private static final Logger a = LogManager.getLogger();
-    private List<ChunkRegionLoader.PendingChunkToSave> b = Lists.newArrayList();
-    private Set<ChunkCoordIntPair> c = Sets.newHashSet();
+    private java.util.LinkedHashMap<ChunkCoordIntPair, PendingChunkToSave> map = new java.util.LinkedHashMap<ChunkCoordIntPair, PendingChunkToSave>(); // MinetickMod
     private Object d = new Object();
     private final File e;
 
@@ -30,13 +29,11 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
         ChunkCoordIntPair chunkcoordintpair = new ChunkCoordIntPair(i, j);
 
         synchronized (this.d) {
-            if (this.c.contains(chunkcoordintpair)) {
-                for (int k = 0; k < this.b.size(); ++k) {
-                    if (((PendingChunkToSave) this.b.get(k)).a.equals(chunkcoordintpair)) {
-                        return true;
-                    }
-                }
+            // MinetickMod start
+            if(this.map.containsKey(chunkcoordintpair) && this.map.get(chunkcoordintpair).a.equals(chunkcoordintpair)) {
+                return true;
             }
+            // MinetickMod end
         }
 
         return RegionFileCache.a(this.e, i, j).chunkExists(i & 31, j & 31);
@@ -63,14 +60,14 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
         Object object = this.d;
 
         synchronized (this.d) {
-            if (this.c.contains(chunkcoordintpair)) {
-                for (int k = 0; k < this.b.size(); ++k) {
-                    if (((ChunkRegionLoader.PendingChunkToSave) this.b.get(k)).a.equals(chunkcoordintpair)) {
-                        nbttagcompound = ((ChunkRegionLoader.PendingChunkToSave) this.b.get(k)).b;
-                        break;
-                    }
+            // MinetickMod start
+            if(this.map.containsKey(chunkcoordintpair)) {
+                PendingChunkToSave pcts = this.map.get(chunkcoordintpair);
+                if(pcts.a.equals(chunkcoordintpair)) {
+                    nbttagcompound = pcts.b;
                 }
             }
+            // MinetickMod end
         }
 
         if (nbttagcompound == null) {
@@ -149,17 +146,11 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
         Object object = this.d;
 
         synchronized (this.d) {
-            if (this.c.contains(chunkcoordintpair)) {
-                for (int i = 0; i < this.b.size(); ++i) {
-                    if (((ChunkRegionLoader.PendingChunkToSave) this.b.get(i)).a.equals(chunkcoordintpair)) {
-                        this.b.set(i, new ChunkRegionLoader.PendingChunkToSave(chunkcoordintpair, nbttagcompound));
-                        return;
-                    }
-                }
+            // MinetickMod start
+            if(this.map.put(chunkcoordintpair, new PendingChunkToSave(chunkcoordintpair, nbttagcompound)) != null) {
+                return;
             }
-
-            this.b.add(new ChunkRegionLoader.PendingChunkToSave(chunkcoordintpair, nbttagcompound));
-            this.c.add(chunkcoordintpair);
+            // MinetickMod end
             FileIOThread.a().a(this);
         }
     }
@@ -169,18 +160,28 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
         Object object = this.d;
 
         synchronized (this.d) {
-            if (this.b.isEmpty()) {
+            // MinetickMod start
+            Iterator<java.util.Map.Entry<ChunkCoordIntPair, PendingChunkToSave>> iterator = this.map.entrySet().iterator();
+            if(iterator.hasNext()) {
+                chunkregionloader_pendingchunktosave = iterator.next().getValue();
+                iterator.remove();
+            } else {
                 return false;
             }
-
-            chunkregionloader_pendingchunktosave = (ChunkRegionLoader.PendingChunkToSave) this.b.remove(0);
-            this.c.remove(chunkregionloader_pendingchunktosave.a);
+            // MinetickMod end
         }
 
         if (chunkregionloader_pendingchunktosave != null) {
             try {
                 this.a(chunkregionloader_pendingchunktosave);
             } catch (Exception exception) {
+                // MinetickMod start - If saving fails, dont dismiss the chunk, but readd it to the queue
+                synchronized(this.d) {
+                    if(!this.map.containsKey(chunkregionloader_pendingchunktosave.a)) {
+                        this.map.put(chunkregionloader_pendingchunktosave.a, chunkregionloader_pendingchunktosave);
+                    }
+                }
+                // MinetickMod end
                 exception.printStackTrace();
             }
         }
-- 
1.8.3.msysgit.0

