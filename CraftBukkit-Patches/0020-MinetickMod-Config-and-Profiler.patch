From 59c79b7d00f0c3f0d916b86bd93e9c2830fc8b0a Mon Sep 17 00:00:00 2001
From: Poweruser <poweruser.rs@hotmail.com>
Date: Tue, 7 Jul 2015 00:05:43 +0200
Subject: [PATCH] MinetickMod Config and Profiler


diff --git a/src/main/java/de/minetick/MinetickMod.java b/src/main/java/de/minetick/MinetickMod.java
new file mode 100644
index 0000000..1e7388f
--- /dev/null
+++ b/src/main/java/de/minetick/MinetickMod.java
@@ -0,0 +1,136 @@
+package de.minetick;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Collections;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.concurrent.Callable;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.ScheduledFuture;
+import java.util.concurrent.TimeUnit;
+
+import net.minecraft.server.MinecraftServer;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.craftbukkit.CraftServer;
+
+import de.minetick.modcommands.ReloadSettingsCommand;
+import de.minetick.modcommands.TPSCommand;
+import de.minetick.pathsearch.PathSearchThrottlerThread;
+import de.minetick.profiler.Profiler;
+
+public class MinetickMod {
+
+    private MinetickModConfig mainConfig;
+    private boolean failedToLoadConfig = false;
+    private TickTimer tickTimerObject;
+    private int timerDelay = 45;
+    private ScheduledExecutorService timerService = Executors.newScheduledThreadPool(2, new MinetickThreadFactory(Thread.NORM_PRIORITY + 2, "MinetickMod_TimerService"));
+    private ScheduledFuture<Object> tickTimerTask;
+    private static MinetickMod instance;
+    private Profiler profiler;
+    private boolean initDone = false;
+    private TickCounter tickCounterObject;
+    private List<Integer> ticksPerSecond;
+    private int ticksCounter = 0;
+    private final Logger log = LogManager.getLogger();
+
+    public MinetickMod() {
+        this.tickTimerObject = new TickTimer();
+        this.tickCounterObject = new TickCounter();
+        this.ticksPerSecond = Collections.synchronizedList(new LinkedList<Integer>());
+        this.timerService.scheduleAtFixedRate(this.tickCounterObject, 1, 1, TimeUnit.SECONDS);
+        instance = this;
+        try {
+            this.mainConfig = new MinetickModConfig(new File("minetickmod.yml"));
+        } catch (IOException e) {
+            this.failedToLoadConfig = true;
+        } catch (InvalidConfigurationException e) {
+            this.failedToLoadConfig = true;
+        } catch (NullPointerException e) {
+            // Bukkit's logger is not yet initialized at this point and throws an NPE when trying to log an yaml load fail
+            this.failedToLoadConfig = true;
+        }
+    }
+
+    public void init() {
+        if(!this.initDone) {
+            this.initDone = true;
+            if(this.failedToLoadConfig) {
+                throw new IllegalStateException("MinetickMod's config file minetickmod.yml could not be loaded. Check it for syntax errors.");
+            }
+            CraftServer craftserver = MinecraftServer.getServer().server;
+            craftserver.getCommandMap().register("tps", "MinetickMod", new TPSCommand("tps"));
+            craftserver.getCommandMap().register("minetickmod-reload", "MinetickMod", new ReloadSettingsCommand("minetickmod-reload"));
+            this.profiler = new Profiler(this.mainConfig.getProfilerLogInterval(), this.mainConfig.getProfilerWriteEnabled(), this.mainConfig.getProfilerWriteInterval());
+        }
+    }
+
+    public static MinetickModConfig getConfig() {
+        return instance.mainConfig;
+    }
+
+    public Profiler getProfiler() {
+        return this.profiler;
+    }
+
+    public static Profiler getProfilerStatic() {
+        return instance.getProfiler();
+    }
+
+    public void shutdown() {
+        this.timerService.shutdown();
+    }
+
+    public void checkTickTime(long tickTime) {
+        if(tickTime > 45000000L) {
+            if(this.timerDelay > 40) {
+                this.timerDelay--;
+            }
+        } else if(this.timerDelay < 45) {
+            this.timerDelay++;
+        }
+    }
+
+    public void startTickTimerTask() {
+        this.tickTimerTask = instance.timerService.schedule(this.tickTimerObject, this.timerDelay, TimeUnit.MILLISECONDS);
+    }
+
+    public void cancelTimerTask(boolean flag) {
+        this.tickTimerTask.cancel(false);
+    }
+
+    private class TickTimer implements Callable<Object> {
+        public Object call() {
+            MinecraftServer.getServer().cancelHeavyCalculationsForAllWorlds(true);
+            return null;
+        }
+    }
+
+    private class TickCounter implements Runnable {
+        @Override
+        public void run() {
+            ticksPerSecond.add(ticksCounter);
+            ticksCounter = 0;
+            if(ticksPerSecond.size() > 30) {
+                ticksPerSecond.remove(0);
+            }
+        }
+    }
+
+    public void increaseTickCounter() {
+        this.ticksCounter++;
+    }
+
+    public static Integer[] getTicksPerSecond() {
+        Integer[] emptyArray = new Integer[0];
+        if(instance != null) {
+            return instance.ticksPerSecond.toArray(emptyArray);
+        }
+        return emptyArray;
+    }
+}
diff --git a/src/main/java/de/minetick/MinetickModConfig.java b/src/main/java/de/minetick/MinetickModConfig.java
new file mode 100644
index 0000000..c14a63b
--- /dev/null
+++ b/src/main/java/de/minetick/MinetickModConfig.java
@@ -0,0 +1,114 @@
+package de.minetick;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.UUID;
+
+import net.minecraft.server.Block;
+import net.minecraft.server.EntityInsentient;
+import net.minecraft.server.EntityLiving;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.NetworkManager;
+import net.minecraft.server.PacketPlayOutMapChunk;
+import net.minecraft.server.PacketPlayOutMapChunkBulk;
+import net.minecraft.server.PlayerChunkMap;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.bukkit.entity.EntityType;
+
+import com.google.common.base.Charsets;
+
+import de.minetick.MinetickChunkCoordComparator.ChunkPriority;
+import de.minetick.antixray.AntiXRay;
+import de.minetick.packetbuilder.PacketBuilderThreadPool;
+import de.minetick.pathsearch.MinetickNavigation;
+import de.minetick.pathsearch.PathSearchThrottlerThread;
+
+public class MinetickModConfig {
+
+    private final Logger logger = LogManager.getLogger();
+    private File configFile;
+    private FileConfiguration configuration;
+
+    public MinetickModConfig(File configFile) throws IOException, InvalidConfigurationException {
+        this.configFile = configFile;
+        this.configuration = this.loadConfig(configFile);
+        try {
+            this.configuration.save(configFile);
+        } catch(IOException e) {
+            logger.error("[MinetickMod] Could not save config file minetickmod.yml!");
+            logger.error(e.toString());
+        }
+
+        this.loadConfigContent();
+    }
+
+    public FileConfiguration[] reload() throws IOException, InvalidConfigurationException {
+        FileConfiguration[] configs = new FileConfiguration[2];
+        configs[0] = this.configuration;
+        this.configuration = this.loadConfig(this.configFile);
+        configs[1] = this.configuration;
+        this.loadConfigContent();
+        return configs;
+    }
+
+    private void loadConfigContent() {
+
+    }
+
+    private FileConfiguration loadConfig(File file) throws IOException, InvalidConfigurationException {
+        YamlConfiguration config = new YamlConfiguration();
+        config.options().copyDefaults(true);
+        if(file.exists() && file.isFile()) {
+            try {
+                config.load(file);
+            } catch (FileNotFoundException e) {
+                // Can not happen, I check if the file exists first
+            }
+        } else {
+            File bukkitFile = new File("bukkit.yml");
+            if(bukkitFile.exists() && bukkitFile.isFile()) {
+                FileConfiguration bukkitConfig = YamlConfiguration.loadConfiguration(bukkitFile);
+                String sectionName = "minetickmod";
+                if(bukkitConfig.contains(sectionName)) {
+                    ConfigurationSection section = bukkitConfig.getConfigurationSection(sectionName);
+                    config.set(sectionName, section);
+                    bukkitConfig.set(sectionName, null);
+                    try {
+                        bukkitConfig.save(bukkitFile);
+                    } catch(IOException e) {}
+                }
+            }
+        }
+        InputStreamReader defConfigStream = new InputStreamReader(getClass().getClassLoader().getResourceAsStream("configurations/minetickmod.yml"), Charsets.UTF_8);
+        if(defConfigStream != null) {
+            YamlConfiguration defConfig = YamlConfiguration.loadConfiguration(defConfigStream);
+            config.setDefaults(defConfig);
+        }
+        return config;
+    }
+
+    public boolean getProfilerWriteEnabled() {
+        return configuration.getBoolean("minetickmod.profiler-write-log");
+    }
+
+    public int getProfilerWriteInterval() {
+        return configuration.getInt("minetickmod.profiler-write-interval", 30);
+    }
+
+    public int getProfilerLogInterval() {
+        return configuration.getInt("minetickmod.profiler-log-interval", 10);
+    }
+}
diff --git a/src/main/java/de/minetick/MinetickThreadFactory.java b/src/main/java/de/minetick/MinetickThreadFactory.java
new file mode 100644
index 0000000..4fb6363
--- /dev/null
+++ b/src/main/java/de/minetick/MinetickThreadFactory.java
@@ -0,0 +1,35 @@
+package de.minetick;
+
+import java.util.concurrent.Executors;
+import java.util.concurrent.ThreadFactory;
+
+public class MinetickThreadFactory implements ThreadFactory {
+
+    private int priority;
+    private int idCounter = 0;
+    private String name = "MinetickModThread";
+
+    public MinetickThreadFactory(int priority) {
+        this.priority = Math.max(priority, Thread.MIN_PRIORITY);
+        this.priority = Math.min(priority, Thread.MAX_PRIORITY);
+    }
+
+    public MinetickThreadFactory(int priority, String name) {
+        this(priority);
+        this.name = name;
+    }
+
+    public MinetickThreadFactory(String name) {
+        this(Thread.NORM_PRIORITY);
+        this.name = name;
+    }
+
+    @Override
+    public Thread newThread(Runnable runnable) {
+        Thread thread = Executors.defaultThreadFactory().newThread(runnable);
+        thread.setPriority(this.priority);
+        thread.setName(this.name + "-" + String.valueOf(idCounter));
+        idCounter++;
+        return thread;
+    }
+}
diff --git a/src/main/java/de/minetick/modcommands/ReloadSettingsCommand.java b/src/main/java/de/minetick/modcommands/ReloadSettingsCommand.java
new file mode 100644
index 0000000..cf02166
--- /dev/null
+++ b/src/main/java/de/minetick/modcommands/ReloadSettingsCommand.java
@@ -0,0 +1,101 @@
+package de.minetick.modcommands;
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.command.ConsoleCommandSender;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.FileConfiguration;
+
+import de.minetick.MinetickMod;
+
+public class ReloadSettingsCommand extends Command {
+
+    private final Logger logger = LogManager.getLogger();
+
+    public ReloadSettingsCommand(String name) {
+        super(name);
+        this.usageMessage = "/minetickmod-reload";
+        this.description = "Reloads the configurations of MinetickMod from its settings file minetickmod.yml";
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String label, String[] args) {
+        if(!sender.hasPermission("minetickmod.commands.reload")) {
+            sender.sendMessage("You are not allowed to use this command!");
+            return true;
+        }
+        this.sendMessage(sender, ChatColor.GOLD + "[MinetickMod]" + ChatColor.RESET + " Reloading config file minetickmod.yml ... ");
+
+        FileConfiguration[] configs;
+
+        String errorMsg = ChatColor.GOLD + "[MinetickMod]" + ChatColor.RED + " Reloading failed!\n" + ChatColor.RESET;
+        try {
+            configs = MinetickMod.getConfig().reload();
+        } catch (IOException e) {
+            this.sendMessage(sender, errorMsg + e.getMessage());
+            return true;
+        } catch (InvalidConfigurationException e) {
+            this.sendMessage(sender, errorMsg + e.getMessage());
+            return true;
+        }
+        FileConfiguration old = configs[0];
+        FileConfiguration current = configs[1];
+
+        StringBuilder sb = new StringBuilder();
+        for(String key: old.getKeys(true)) {
+            String v1 = old.getString(key);
+            String v2 = current.getString(key);
+            if(v1 != null && v2 == null) {
+                sb.append(ChatColor.RED);
+                sb.append("Removed entry: ");
+                sb.append(ChatColor.RESET);
+                sb.append(key);
+                sb.append("\nValue: ");
+                sb.append(v1);
+                sb.append("\n");
+            }
+        }
+        for(String key: current.getKeys(true)) {
+            String v1 = old.getString(key);
+            String v2 = current.getString(key);
+            if((v1 == null || v1.isEmpty()) && v2 != null) {
+                sb.append(ChatColor.YELLOW);
+                sb.append("New entry: ");
+                sb.append(ChatColor.RESET);
+                sb.append(key);
+                sb.append("\nValue: ");
+                sb.append(v2);
+                sb.append("\n");
+            } else if(v1 != null && v2 != null && !v1.equals(v2)) {
+                sb.append(ChatColor.GREEN);
+                sb.append("Changed entry: ");
+                sb.append(ChatColor.RESET);
+                sb.append(key);
+                sb.append("\nFrom: ");
+                sb.append(v1);
+                sb.append("\nTo: ");
+                sb.append(v2);
+                sb.append("\n");
+            }
+        }
+        if (sb.length() > 0) {
+            this.sendMessage(sender, sb.toString());
+        }
+        this.sendMessage(sender, ChatColor.GOLD + "[MinetickMod]" + ChatColor.RESET + " Config file has been reloaded.");
+        return true;
+    }
+
+    private void sendMessage(CommandSender receiver, String msg) {
+        this.logger.info(ChatColor.stripColor(msg));
+        if(!(receiver instanceof ConsoleCommandSender)) {
+            receiver.sendMessage(msg);
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/de/minetick/modcommands/TPSCommand.java b/src/main/java/de/minetick/modcommands/TPSCommand.java
new file mode 100644
index 0000000..a9b0f68
--- /dev/null
+++ b/src/main/java/de/minetick/modcommands/TPSCommand.java
@@ -0,0 +1,79 @@
+package de.minetick.modcommands;
+
+import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+
+import de.minetick.MinetickMod;
+
+public class TPSCommand extends Command {
+
+    private int[] steps = new int[] {18, 16, 14, 10, 0};
+    private ChatColor[] colors = new ChatColor[] {ChatColor.GREEN, ChatColor.YELLOW, ChatColor.YELLOW, ChatColor.GOLD, ChatColor.RED };
+    private StringBuilder[] builders = new StringBuilder[5];
+
+    public TPSCommand(String name) {
+        super(name);
+        this.usageMessage = "/tps";
+        this.description = "Displays the servers tick rate of the last 30 seconds";
+        for(int i = 0; i < this.builders.length; i++) {
+            this.builders[i] = new StringBuilder();
+        }
+    }
+
+    public boolean execute(CommandSender sender, String currentAlias, String[] args) {
+        Integer[] array = MinetickMod.getTicksPerSecond();
+        boolean runByPlayer = (sender instanceof Player);
+        if(array.length == 0) {
+            sender.sendMessage(ChatColor.GOLD + "TPS statistic: " + ChatColor.RESET + "No data available yet. Try again later");
+            return true;
+        }
+        for(int i = 0; i < this.builders.length; i++) {
+            this.builders[i].delete(0, this.builders[i].length());
+        }
+
+        int start = array.length - 30;
+        for(int i = start; i < array.length; i++) {
+            Integer k;
+            if(i < 0) {
+                k = 0;
+            } else {
+                k = array[i];
+            }
+            for(int j = 0; j < this.steps.length; j++) {
+                if(k > this.steps[j]) {
+                    if(runByPlayer) {
+                        this.builders[j].append(this.colors[j]);
+                        this.builders[j].append('\u2B1B');
+                        this.builders[j].append(ChatColor.RESET);
+                    } else {
+                        this.builders[j].append("#");
+                    }
+                } else {
+                    if(runByPlayer) {
+                        this.builders[j].append(ChatColor.BLACK);
+                        this.builders[j].append('\u2B1C');
+                        this.builders[j].append(ChatColor.RESET);
+                    } else {
+                        this.builders[j].append("_");
+                    }
+                }
+            }
+        }
+        ChatColor current = ChatColor.RED;
+        Integer last = array[array.length - 1];
+        for(int i = 0; i < this.steps.length; i++) {
+            if(this.steps[i] < last) {
+                current = this.colors[i];
+                break;
+            }
+        }
+        sender.sendMessage(ChatColor.GOLD + "Current TPS: " + current + last + ChatColor.GOLD + "  TPS statistic (last 30 seconds):");
+        for(int i = 0; i < this.builders.length; i++) {
+            this.builders[i].append("   >" + this.steps[i]);
+            sender.sendMessage(this.builders[i].toString());
+        }
+        return true;
+    }
+}
diff --git a/src/main/java/de/minetick/profiler/Profile.java b/src/main/java/de/minetick/profiler/Profile.java
new file mode 100644
index 0000000..03515c9
--- /dev/null
+++ b/src/main/java/de/minetick/profiler/Profile.java
@@ -0,0 +1,271 @@
+package de.minetick.profiler;
+
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class Profile {
+
+    private ProfileCall[] records;
+    private int lastIndex;
+    private int index;
+    private File folder;
+    private File file;
+    private BufferedWriter writer;
+    private String ident;
+    private SimpleDateFormat currentTime;
+    private long startTime;
+    private long endTime;
+    protected ArrayList<String> output = new ArrayList<String>();
+
+    private long avgSum = 0L;
+    private int avgCount = 0, avgMaxCount;
+
+    private long avgTickEntitiesTime;
+
+    private boolean errorShown = false;
+
+    protected int counter;
+    protected boolean writeEnabled;
+    protected int writeStep;
+    private int avgPlayers;
+
+    public Profile(int size, String ident, int avgMaxCount, boolean writeToFile, int writeSteps) {
+        this.avgTickEntitiesTime = 0L;
+        this.ident = ident;
+        this.avgMaxCount = avgMaxCount;
+        this.writeEnabled = writeToFile;
+        this.writeStep = writeSteps;
+        this.currentTime = new SimpleDateFormat ("HH:mm:ss");
+        if(writeToFile) {
+            SimpleDateFormat df = new SimpleDateFormat ("yyyy.MM.dd_HH-mm-ss");
+            Calendar c = Calendar.getInstance();
+            int day = c.get(Calendar.DAY_OF_MONTH);
+            String d = String.valueOf(day);
+            if(d.length() < 2) {
+                d = "0" + d;
+            }
+            int month = c.get(Calendar.MONTH) + 1;
+            String m = String.valueOf(month);
+            if(m.length() < 2) {
+                m = "0" + m;
+            }
+            int year = c.get(Calendar.YEAR);
+            File path = new File("Profiler");
+            path = new File(path, year + "." + m);
+            this.folder = new File(path, d);
+            this.file = new File(this.folder, "MTProfiler_" + df.format(new Date()) + "_" + ident + ".txt");
+        }
+        this.lastIndex = 0;
+        this.index = 0;
+        this.counter = 0;
+        this.records = new ProfileCall[size*20];
+        this.startTime = 0L;
+        this.endTime = 0L;
+    }
+
+    public String getIdent() {
+        return this.ident;
+    }
+
+    public long getLastAvg() {
+        return this.avgTickEntitiesTime;
+    }
+
+    public float getLastAvgFloat() {
+        return ((float)(this.getLastAvg() / 100000L)) / 10.0F;
+    }
+
+    public int getPlayerAvg() {
+        return this.avgPlayers;
+    }
+
+    public long getRecord(int i) {
+        if(i >= 0 && i <= this.index) {
+            return this.records[index].getTime();
+        } else {
+            ProfileCall pc = this.records[this.index];
+            if(pc != null) {
+                return pc.getTime();
+            }
+        }
+        return 0L;
+    }
+
+    public void setCustomRecord(int index, long time) {
+        if(this.index < this.records.length) {
+            if(this.records[index] == null) {
+                this.records[index] = new ProfileCall();
+            }
+            this.records[index].setTime(time);
+        }
+    }
+
+    public void setCurrentPlayerNumber(int count) {
+        if(this.index < this.records.length) {
+            this.records[this.index].setPlayerNumber(count);
+        }
+    }
+
+    public void setGeneratedChunks(int count) {
+        if(this.index < this.records.length) {
+            this.records[this.index].setGeneratedChunks(count);
+        }
+    }
+
+    public void start() {
+        this.startTime = System.nanoTime();
+    }
+
+    public long stop() {
+        this.endTime = System.nanoTime();
+        long measuredTime = this.endTime - this.startTime;
+        this.avgCount++;
+        this.avgSum += measuredTime;
+        if(this.avgCount >= this.avgMaxCount) {
+            this.avgTickEntitiesTime = (this.avgSum / this.avgCount);
+            this.avgSum = 0L;
+            this.avgCount = 0;
+        }
+        if(this.index < this.records.length) {
+            if(this.records[this.index] == null) {
+                this.records[this.index] = new ProfileCall();
+            }
+            this.records[this.index].add(measuredTime);
+            return this.records[this.index].getTime();
+        }
+        return 0L;
+    }
+
+    public void newTick(int index, int cnt) {
+        this.lastIndex = this.index;
+        this.index = index;
+        if(cnt > this.counter) {
+            this.counter = cnt;
+
+            this.calcRecord(this.writeEnabled);
+            if(this.writeEnabled) {
+                if((this.counter % this.writeStep) == 0) {
+                    this.writeToFile();
+                }
+            }
+        }
+    }
+
+    protected String currentTime() {
+        return this.currentTime.format(new Date());
+    }
+
+    protected void calcRecord(boolean writeEnabled) {
+        long avg = 0L, max = Long.MIN_VALUE, calls = 0L;
+        int i = 0, playerAvg = 0, chunks = 0;
+        for(i = 0; i < this.records.length && i <= this.lastIndex; i++) {
+            if(this.records[i] != null) {
+                avg += this.records[i].getTime();
+                if(this.writeEnabled) {
+                    playerAvg += this.records[i].getPlayerNumber();
+                    chunks += this.records[i].getGeneratedChunks();
+                    calls += this.records[i].getCount();
+                    if(this.records[i].getTime() > max) {
+                        max = this.records[i].getTime();
+                    }
+                }
+                this.records[i].reset();
+            }
+        }
+        if(i > 0) {
+            avg = avg / i;
+            playerAvg = playerAvg / i;
+            calls = calls / i;
+        } else {
+            avg = 0L;
+            calls = 0L;
+        }
+        this.avgTickEntitiesTime = avg;
+        this.avgPlayers = playerAvg;
+        if(writeEnabled) {
+            float favg = ((float)(avg / 100000L)) / 10.0F;
+            float fmax = ((float)(max / 100000L)) / 10.0F;
+            List<String> data = new LinkedList<String>();
+            data.add("Avg: " + favg);
+            data.add("Max: " + fmax);
+            data.add("AvgCalls: " + calls);
+            data.add("Players: " + playerAvg);
+            if(chunks > 0) {
+                data.add("GeneratedChunks: " + chunks);
+            }
+            this.addToOutput(this.counter, this.currentTime(), data);
+        }
+    }
+
+    protected void addToOutput(int counter, String time, List<String> data) {
+        StringBuilder sb = new StringBuilder();
+        sb.append(counter).append(" ");
+        sb.append(time).append(" ");
+        for(String s: data) {
+            if(s != null) {
+                sb.append(s.replace(".", ","));
+                sb.append("  ");
+            }
+        }
+        this.output.add(sb.toString());
+    }
+
+    protected void writeToFile() {
+        boolean exists = this.file.exists();
+        if(!exists) {
+            try {
+                this.folder.mkdirs();
+                exists = this.file.createNewFile();
+            } catch (IOException e) {
+                if(!errorShown) {
+                    errorShown = true;
+                    Logger a = Logger.getLogger("Minecraft");
+                    a.log(Level.WARNING, "MinetickMod-Profiler: Could not create the file: " + this.file.getAbsolutePath() + " Reason: "+ e.getMessage());
+                }
+            }
+        }
+        int code = 0;
+        boolean failed = false;
+        if(exists && this.file.canWrite()) {
+            try {
+                if(this.writer == null) {
+                    this.writer = new BufferedWriter(new FileWriter(this.file, true), 8 * 1024);
+                }
+                for(String s: this.output) {
+                    this.writer.write(s);
+                    this.writer.newLine();
+                }
+                this.writer.flush();
+            } catch (IOException e) {
+                failed = true;
+                code = 1;
+            } finally {
+                if(this.writer != null) {
+                    try {
+                        this.writer.close();
+                    } catch (IOException e) {}
+                }
+                this.writer = null;
+            }
+        } else {
+            failed = true;
+            code = 2;
+        }
+        if(failed && !errorShown) {
+            errorShown = true;
+            Logger a = Logger.getLogger("Minecraft");
+            a.log(Level.WARNING, "MinetickMod-Profiler: Could not write the profiler records of " + ident + " to disk! Code: " + code + "! " + this.file.getAbsolutePath());
+        }
+        this.output.clear();
+    }
+}
diff --git a/src/main/java/de/minetick/profiler/ProfileCall.java b/src/main/java/de/minetick/profiler/ProfileCall.java
new file mode 100644
index 0000000..ce78fdc
--- /dev/null
+++ b/src/main/java/de/minetick/profiler/ProfileCall.java
@@ -0,0 +1,54 @@
+package de.minetick.profiler;
+
+public class ProfileCall {
+
+    private long time;
+    private int count;
+    private int playerNumber;
+    private int generatedChunks;
+
+    ProfileCall() {
+        this.reset();
+    }
+
+    public int getCount() {
+        return this.count;
+    }
+
+    public long getTime() {
+        return this.time;
+    }
+
+    public void reset() {
+        this.time = 0L;
+        this.count = 0;
+        this.playerNumber = 0;
+        this.generatedChunks = 0;
+    }
+
+    public void add(long t) {
+        this.time += t;
+        this.count++;
+    }
+
+    public void setTime(long t) {
+        this.time = t;
+        this.count++;
+    }
+
+    public void setPlayerNumber(int i) {
+        this.playerNumber = i;
+    }
+
+    public int getPlayerNumber() {
+        return this.playerNumber;
+    }
+
+    public void setGeneratedChunks(int count) {
+        this.generatedChunks += count;
+    }
+
+    public int getGeneratedChunks() {
+        return this.generatedChunks;
+    }
+}
diff --git a/src/main/java/de/minetick/profiler/Profiler.java b/src/main/java/de/minetick/profiler/Profiler.java
new file mode 100644
index 0000000..5e48f78
--- /dev/null
+++ b/src/main/java/de/minetick/profiler/Profiler.java
@@ -0,0 +1,78 @@
+package de.minetick.profiler;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+public class Profiler {
+
+    private Map<String, Profile> map;
+    private boolean worldAvgsHaveChanged;
+    private int logInterval = 10; // seconds
+    private int avgsTickInterval = 5; // seconds
+    private int index = 0, avgIndex = 0;
+    private int counter = 0;
+    private boolean writeToFile;
+    private int writeInterval; // minutes
+
+    public Profiler(int logInterval, boolean writeToFile, int writeInterval) {
+        this.writeToFile = writeToFile;
+        this.logInterval = logInterval;
+        if(this.logInterval < 1) {
+            this.logInterval = 10;
+        }
+        this.writeInterval = writeInterval;
+        if(this.writeInterval < 1) {
+            this.writeInterval = 1;
+            this.writeToFile = false;
+        }
+        this.worldAvgsHaveChanged = false;
+        this.map = Collections.synchronizedMap(new HashMap<String, Profile>());
+    }
+
+    public Profile getProfile(String ident) {
+        return this.map.get(ident);
+    }
+
+    public void start(String ident) {
+        Profile p = this.map.get(ident);
+        if(p == null) {
+            int writeSteps = this.writeInterval * 60 / this.logInterval;
+            p = new Profile(this.logInterval, ident, this.avgsTickInterval, this.writeToFile, writeSteps);
+            this.map.put(ident, p);
+        }
+        p.start();
+    }
+
+    public Profile stop(String ident) {
+        Profile p = this.map.get(ident);
+        if(p != null) {
+            p.stop();
+            return p;
+        }
+        return null;
+    }
+
+    public void newTick() {
+        this.index++;
+        this.avgIndex++;
+        if(this.avgIndex >= this.avgsTickInterval * 20) {
+            this.avgIndex = 0;
+            this.worldAvgsHaveChanged = true;
+        }
+        if(this.index >= this.logInterval * 20) {
+            this.counter++;
+            this.index = 0;
+        }
+        for(Profile p: this.map.values()) {
+            p.newTick(this.index, this.counter);
+        }
+    }
+
+    public boolean checkAvgs() {
+        boolean out = this.worldAvgsHaveChanged;
+        this.worldAvgsHaveChanged = false;
+        return out;
+    }
+}
+
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 6945d7d..174359c 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -178,6 +178,8 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
             this.a((PlayerList) (new DedicatedPlayerList(this))); // CraftBukkit
 
+            this.minetickMod.init(); // MinetickMod
+
             if (!this.getOnlineMode()) {
                 DedicatedServer.LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
                 DedicatedServer.LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 38f7469..114888a 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -55,6 +55,8 @@ import org.bukkit.event.world.WorldSaveEvent;
 // MinetickMod start
 import de.minetick.AutoSaveJob;
 import de.minetick.AutoSaveJob.JobDetail;
+import de.minetick.MinetickMod;
+import de.minetick.profiler.Profile;
 
 import java.util.LinkedList;
 // MinetickMod end
@@ -129,6 +131,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     // CraftBukkit end
 
     // MinetickMod start
+    protected MinetickMod minetickMod;
     protected boolean snooperEnabled;
     private LinkedList<AutoSaveJob> autoSaveWorlds = new LinkedList<AutoSaveJob>();
     private int autoSaveDelay = 0;
@@ -164,11 +167,18 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
             this.autoSaveOrdered = false;
         }
     }
+
+    public void cancelHeavyCalculationsForAllWorlds(boolean cancel) {
+        for(WorldServer ws: this.worlds) {
+            ws.cancelHeavyCalculations(cancel);
+        }
+    }
     // MinetickMod end
 
     public MinecraftServer(OptionSet options, Proxy proxy, File file1) {
         this.e = proxy;
         MinecraftServer.l = this;
+        this.minetickMod = new MinetickMod(); // MinetickMod
         // this.universe = file; // CraftBukkit
         this.q = new ServerConnection(this);
         this.Z = new UserCache(this, file1);
@@ -529,6 +539,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                 this.n.e();
             }
 
+            this.minetickMod.shutdown(); // MinetickMod
         }
     }
 
@@ -667,6 +678,12 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     protected void A() throws ExceptionWorldConflict { // CraftBukkit - added throws
         long i = System.nanoTime();
 
+        // MinetickMod start
+        this.minetickMod.getProfiler().start("GameLogicLoop");
+        this.minetickMod.startTickTimerTask();
+        this.minetickMod.increaseTickCounter();
+        // MinetickMod end
+
         ++this.ticks;
         if (this.T) {
             this.T = false;
@@ -701,10 +718,12 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         if(this.autoSaveOrdered) {
             this.autoSaveNextWorld();
         }
+        long tickTime = System.nanoTime() - i;
+        this.minetickMod.checkTickTime(tickTime);
         // MinetickMod end
 
         this.methodProfiler.a("tallying");
-        this.h[this.ticks % 100] = System.nanoTime() - i;
+        this.h[this.ticks % 100] = tickTime; // MinetickMod
         this.methodProfiler.b();
         this.methodProfiler.a("snooper");
         if (this.snooperEnabled && !this.n.d() && this.ticks > 100) { // MinetickMod
@@ -717,6 +736,12 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 
         this.methodProfiler.b();
         this.methodProfiler.b();
+
+        // MinetickMod start
+        Profile p = this.minetickMod.getProfiler().stop("GameLogicLoop");
+        p.setCurrentPlayerNumber(this.I());
+        this.minetickMod.getProfiler().newTick();
+        // MinetickMod end
     }
 
     public void B() {
@@ -797,6 +822,8 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         }
 
         // MinetickMod start
+        this.minetickMod.cancelTimerTask(false);
+
         for(i = 0; i < this.worlds.size(); ++i) {
             WorldServer worldserver = this.worlds.get(i);
             worldserver.processDimensionChangeQueue();
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 40df44d..056799e 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -169,6 +169,7 @@ public abstract class World implements IBlockAccess {
     // MinetickMod start
     public boolean instaFall = false;
     private List<Entity> dimensionChangeQueue = Collections.synchronizedList(new ArrayList<Entity>());
+    protected boolean cancelHeavyCalculations = false;
 
     public void queueEntityForDimensionChange(Entity entity) {
         this.dimensionChangeQueue.add(entity);
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index d4b61c6..b1521ad 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -53,6 +53,12 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     // CraftBukkit start
     public final int dimension;
 
+    // MinetickMod start
+    public void cancelHeavyCalculations(boolean cancel) {
+        this.cancelHeavyCalculations = cancel;
+    }
+    // MinetickMode end
+
     // Add env and gen to constructor
     public WorldServer(MinecraftServer minecraftserver, IDataManager idatamanager, WorldData worlddata, int i, MethodProfiler methodprofiler, org.bukkit.World.Environment env, org.bukkit.generator.ChunkGenerator gen) {
         super(idatamanager, worlddata, WorldProvider.byDimension(env.getId()), methodprofiler, false, gen, env);
diff --git a/src/main/resources/configurations/minetickmod.yml b/src/main/resources/configurations/minetickmod.yml
new file mode 100644
index 0000000..ebf121b
--- /dev/null
+++ b/src/main/resources/configurations/minetickmod.yml
@@ -0,0 +1,4 @@
+minetickmod:
+    profiler-log-interval: 30
+    profiler-write-log: false
+    profiler-write-interval: 10
-- 
1.8.3.msysgit.0

