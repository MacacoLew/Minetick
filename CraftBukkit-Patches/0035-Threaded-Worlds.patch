From 5c6b96c498821c71cf5007610b84036f5376fa0e Mon Sep 17 00:00:00 2001
From: Poweruser <poweruser.rs@hotmail.com>
Date: Wed, 8 Jul 2015 05:18:25 +0200
Subject: [PATCH] Threaded Worlds


diff --git a/src/main/java/de/minetick/MinetickMod.java b/src/main/java/de/minetick/MinetickMod.java
index 782e6be..36c046e 100644
--- a/src/main/java/de/minetick/MinetickMod.java
+++ b/src/main/java/de/minetick/MinetickMod.java
@@ -11,14 +11,28 @@ import java.util.List;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 
+import net.minecraft.server.Entity;
+import net.minecraft.server.EntityArrow;
+import net.minecraft.server.EntityComplexPart;
+import net.minecraft.server.EntityEnderCrystal;
+import net.minecraft.server.EntityEnderDragon;
+import net.minecraft.server.EntityFireball;
+import net.minecraft.server.EntityFireworks;
+import net.minecraft.server.EntityGhast;
 import net.minecraft.server.EntityInsentient;
+import net.minecraft.server.EntityPlayer;
+import net.minecraft.server.EntityProjectile;
+import net.minecraft.server.EntityWeather;
+import net.minecraft.server.EntityWither;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.NBTCompressedStreamTools;
 import net.minecraft.server.NBTTagCompound;
+import net.minecraft.server.WorldServer;
 
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -28,6 +42,7 @@ import org.bukkit.entity.EntityType;
 
 import de.minetick.modcommands.ReloadSettingsCommand;
 import de.minetick.modcommands.TPSCommand;
+import de.minetick.modcommands.WorldStatsCommand;
 import de.minetick.pathsearch.PathSearchJob;
 import de.minetick.pathsearch.PathSearchThrottlerThread;
 import de.minetick.profiler.Profiler;
@@ -40,6 +55,7 @@ public class MinetickMod {
     private int timerDelay = 45;
     private ExecutorService nbtFileService = Executors.newSingleThreadExecutor(new MinetickThreadFactory(Thread.NORM_PRIORITY - 2, "MinetickMod_NBTFileSaver"));
     private ScheduledExecutorService timerService = Executors.newScheduledThreadPool(2, new MinetickThreadFactory(Thread.NORM_PRIORITY + 2, "MinetickMod_TimerService"));
+    private ExecutorService worldTickerService = Executors.newCachedThreadPool(new MinetickThreadFactory(Thread.NORM_PRIORITY + 1, "MinetickMod_WorldTicker"));
     private ScheduledFuture<Object> tickTimerTask;
     private static MinetickMod instance;
     private Profiler profiler;
@@ -78,6 +94,7 @@ public class MinetickMod {
             CraftServer craftserver = MinecraftServer.getServer().server;
             craftserver.getCommandMap().register("tps", "MinetickMod", new TPSCommand("tps"));
             craftserver.getCommandMap().register("minetickmod-reload", "MinetickMod", new ReloadSettingsCommand("minetickmod-reload"));
+            craftserver.getCommandMap().register("worldstats", "MinetickMod", new WorldStatsCommand("worldstats"));
             this.profiler = new Profiler(this.mainConfig.getProfilerLogInterval(), this.mainConfig.getProfilerWriteEnabled(), this.mainConfig.getProfilerWriteInterval());
         }
     }
@@ -202,4 +219,17 @@ public class MinetickMod {
     public static boolean queuePathSearch(PathSearchJob pathSearchJob) {
         return instance.pathSearchThrottler.queuePathSearch(pathSearchJob);
     }
+
+    public Future<?> tickWorld(WorldServer worldServer) {
+        return this.worldTickerService.submit(worldServer.getWorldTicker(this.profiler));
+    }
+
+    public static boolean isImportantEntity(Entity entity) {
+        return (entity instanceof EntityArrow || entity instanceof EntityPlayer ||
+                entity instanceof EntityProjectile || entity instanceof EntityFireball ||
+                entity instanceof EntityWither || entity instanceof EntityEnderCrystal ||
+                entity instanceof EntityEnderDragon || entity instanceof EntityGhast ||
+                entity instanceof EntityFireworks || entity instanceof EntityComplexPart ||
+                entity instanceof EntityWeather);
+    }
 }
diff --git a/src/main/java/de/minetick/MinetickModConfig.java b/src/main/java/de/minetick/MinetickModConfig.java
index 2f0713f..41b3bfd 100644
--- a/src/main/java/de/minetick/MinetickModConfig.java
+++ b/src/main/java/de/minetick/MinetickModConfig.java
@@ -40,6 +40,7 @@ public class MinetickModConfig {
     private FileConfiguration configuration;
     private HashSet<String> notGeneratingWorlds = new HashSet<String>();
     private HashSet<EntityType> entitiesWithOffloadedPathSearches = new HashSet<EntityType>();
+    private boolean threadedWorlds;
 
     public MinetickModConfig(File configFile) throws IOException, InvalidConfigurationException {
         this.configFile = configFile;
@@ -68,6 +69,7 @@ public class MinetickModConfig {
         this.loadEntitiesWithOffloadedPathSearches(this.getEntitiesWithOffloadedPathSearches());
         MinetickNavigation.setMinimumDistanceForOffloading(this.getMinimumTargetDistanceForOffloading());
         PathSearchThrottlerThread.adjustPoolSize(this.getPathSearchPoolSize());
+        this.threadedWorlds = this.getThreadedWorldsEnabled();
     }
 
     private FileConfiguration loadConfig(File file) throws IOException, InvalidConfigurationException {
@@ -161,4 +163,12 @@ public class MinetickModConfig {
     public boolean isBungeeCordSupportEnabled() {
         return configuration.getBoolean("minetickmod.bungeeCordSupport");
     }
+
+    private boolean getThreadedWorldsEnabled() {
+        return configuration.getBoolean("minetickmod.threadedWorlds");
+    }
+
+    public boolean isThreadedWorldsEnabled() {
+        return this.threadedWorlds;
+    }
 }
diff --git a/src/main/java/de/minetick/WorldTicker.java b/src/main/java/de/minetick/WorldTicker.java
new file mode 100644
index 0000000..8360e0d
--- /dev/null
+++ b/src/main/java/de/minetick/WorldTicker.java
@@ -0,0 +1,50 @@
+package de.minetick;
+
+import net.minecraft.server.WorldServer;
+
+import de.minetick.profiler.Profiler;
+import de.minetick.profiler.WorldProfile;
+import de.minetick.profiler.WorldProfile.WorldProfileSection;
+
+public class WorldTicker implements Runnable {
+    private WorldServer worldToTick;
+    private String worldName;
+    private static Object updatePlayersLock = new Object();
+    private Profiler profiler;
+
+    public WorldTicker(WorldServer world, Profiler prof) {
+        this.profiler = prof;
+        this.worldToTick = world;
+        this.worldName = this.worldToTick.getWorld().getName();
+    }
+
+    @Override
+    public void run() {
+        WorldProfile worldProfile = this.getWorldProfile();
+        worldProfile.start();
+        try {
+            this.worldToTick.tickEntities();
+        } catch (Throwable throwable1) {
+            System.out.println(throwable1.getMessage());
+            throwable1.printStackTrace();
+        }
+
+        worldProfile.start(WorldProfileSection.UPDATE_PLAYERS);
+        synchronized(updatePlayersLock) {
+            this.worldToTick.getTracker().updatePlayers();
+        }
+        worldProfile.stop(WorldProfileSection.UPDATE_PLAYERS);
+
+        worldProfile.stop();
+        worldProfile.setCurrentPlayerNumber(this.worldToTick.players.size());
+        if(MinetickMod.getConfig().isThreadedWorldsEnabled()) {
+            this.worldToTick.setLastTickAvg(worldProfile.getLastThreadAvg());
+        } else {
+            this.worldToTick.setLastTickAvg(worldProfile.getLastAvg());
+        }
+    }
+
+    public WorldProfile getWorldProfile() {
+        return this.profiler.getWorldProfile(this.worldName);
+    }
+}
diff --git a/src/main/java/de/minetick/modcommands/WorldStatsCommand.java b/src/main/java/de/minetick/modcommands/WorldStatsCommand.java
new file mode 100644
index 0000000..70a7c8e
--- /dev/null
+++ b/src/main/java/de/minetick/modcommands/WorldStatsCommand.java
@@ -0,0 +1,190 @@
+package de.minetick.modcommands;
+
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.LinkedList;
+import java.util.List;
+
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.WorldServer;
+
+import org.bukkit.ChatColor;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+
+import de.minetick.MinetickMod;
+import de.minetick.profiler.Profile;
+import de.minetick.profiler.WorldProfile;
+import de.minetick.profiler.WorldProfile.WorldProfileSection;
+
+public class WorldStatsCommand extends Command {
+
+    private WorldNameComparator comparator = new WorldNameComparator();
+
+    public WorldStatsCommand(String name) {
+        super(name);
+        this.usageMessage = "/worldstats";
+        this.description = "Displays technically important details about the active worlds";
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String currentAlias, String[] args) {
+        if(!sender.hasPermission("minetickmod.commands.worldstats")) {
+            sender.sendMessage("You are not allowed to use this command!");
+            return true;
+        }
+        if(args.length < 2) {
+            boolean allWorlds = args.length == 0;
+            boolean foundWorld = allWorlds;
+            boolean sentHeader = false;
+            List<WorldServer> worlds = new LinkedList<WorldServer>();
+            worlds.addAll(MinecraftServer.getServer().worlds);
+            Collections.sort(worlds, this.comparator);
+            InfoHolder overall = null;
+            if(allWorlds) { overall = new InfoHolder("TOTAL"); }
+
+            for(WorldServer ws: worlds) {
+                boolean readWorld = allWorlds;
+                if(!allWorlds) {
+                    String name = ws.getWorld().getName();
+                    if(name.equalsIgnoreCase(args[0])) {
+                        readWorld = true;
+                        foundWorld = true;
+                    }
+                }
+                if(readWorld) {
+                    if(!sentHeader) {
+                        sender.sendMessage("[MinetickMod]" + ChatColor.GOLD + " WorldStats:");
+                        StringBuilder sb = new StringBuilder();
+                        sb.append(ChatColor.GRAY);
+                        sb.append("Name  ");
+                        sb.append(ChatColor.YELLOW);
+                        sb.append("Chunks  ");
+                        sb.append(ChatColor.GREEN);
+                        sb.append("Entites  ");
+                        sb.append(ChatColor.BLUE);
+                        sb.append("TileEntities  ");
+                        sb.append(ChatColor.DARK_PURPLE);
+                        sb.append("Players  ");
+                        sb.append(ChatColor.RED);
+                        sb.append("TickTime");
+                        sender.sendMessage(sb.toString());
+                        sentHeader = true;
+                    }
+                    InfoHolder worldDetails = this.readWorldDetails(ws);
+                    if(allWorlds) { overall.add(worldDetails); }
+                    WorldProfile worldProfile = MinetickMod.getProfilerStatic().getWorldProfile(ws.getWorld().getName());
+                    StringBuilder sb = new StringBuilder();
+                    sb.append(ChatColor.GRAY);
+                    sb.append(worldDetails.name);
+                    sb.append("  ");
+                    sb.append(ChatColor.YELLOW);
+                    sb.append(worldDetails.chunks);
+                    sb.append(ChatColor.RED);
+                    sb.append("(");
+                    sb.append(worldProfile.getLastSectionAvg(WorldProfileSection.DO_TICK));
+                    sb.append(")  ");
+                    sb.append(ChatColor.GREEN);
+                    sb.append(worldDetails.entities);
+                    sb.append(ChatColor.RED);
+                    sb.append("(");
+                    sb.append(worldProfile.getLastSectionAvg(WorldProfileSection.TICK_ENTITIES));
+                    sb.append(")  ");
+                    sb.append(ChatColor.BLUE);
+                    sb.append(worldDetails.tileEntities);
+                    sb.append(ChatColor.RED);
+                    sb.append("(");
+                    sb.append(worldProfile.getLastSectionAvg(WorldProfileSection.TICK_TILEENTITIES));
+                    sb.append(")  ");
+                    sb.append(ChatColor.DARK_PURPLE);
+                    sb.append(worldDetails.players);
+                    sb.append(ChatColor.RED);
+                    sb.append("(");
+                    sb.append(worldProfile.getLastSectionAvg(WorldProfileSection.UPDATE_PLAYERS));
+                    sb.append(")  ");
+                    sb.append(ChatColor.RED);
+                    sb.append("  ");
+                    sb.append(worldProfile.getLastAvgFloat());
+                    sb.append("ms");
+                    sender.sendMessage(sb.toString());
+                }
+            }
+            if(allWorlds) {
+                StringBuilder sb = new StringBuilder();
+                sb.append(ChatColor.DARK_AQUA);
+                sb.append(ChatColor.BOLD);
+                sb.append(overall.name);
+                sb.append(" ");
+                sb.append(ChatColor.RESET);
+                sb.append(ChatColor.YELLOW);
+                sb.append(overall.chunks);
+                sb.append("  ");
+                sb.append(ChatColor.GREEN);
+                sb.append(overall.entities);
+                sb.append("  ");
+                sb.append(ChatColor.BLUE);
+                sb.append(overall.tileEntities);
+                sb.append("  ");
+                sb.append(ChatColor.DARK_PURPLE);
+                sb.append(overall.players);
+                Profile mainloop = MinetickMod.getProfilerStatic().getProfile("Server");
+                if(mainloop != null) {
+                    sb.append(" ");
+                    sb.append(ChatColor.RED);
+                    sb.append(mainloop.getLastAvgFloat());
+                    sb.append("ms");
+                }
+                sender.sendMessage(sb.toString());
+            } else if(!foundWorld) {
+                sender.sendMessage("World '" + args[0] + "' was not found!");
+                return false;
+            }
+            worlds.clear();
+        } else {
+            sender.sendMessage("Command usage: /worldstats [worldName]");
+            return false;
+        }
+        return true;
+    }
+
+    private class WorldNameComparator implements Comparator<WorldServer> {
+        @Override
+        public int compare(WorldServer arg0, WorldServer arg1) {
+            String n1 = arg0.getWorld().getName();
+            String n2 = arg1.getWorld().getName();
+            return n1.compareToIgnoreCase(n2);
+        }
+    }
+
+    private class InfoHolder {
+        public String name;
+        public int chunks = 0;
+        public int entities = 0;
+        public int tileEntities = 0;
+        public int players = 0;
+        public float tickTime = 0.0F;
+
+        public InfoHolder(String name) {
+            this.name = name;
+        }
+
+        public void add(InfoHolder ih) {
+            this.chunks += ih.chunks;
+            this.entities += ih.entities;
+            this.tileEntities += ih.tileEntities;
+            this.players += ih.players;
+            this.tickTime += ih.tickTime;
+        }
+    }
+
+    private InfoHolder readWorldDetails(WorldServer ws) {
+        InfoHolder ih = new InfoHolder(ws.getWorld().getName());
+        ih.chunks = ws.chunkProviderServer.chunks.size();
+        ih.entities = ws.entityList.size();
+        ih.tileEntities = ws.tileEntityList.size();
+        ih.players = ws.players.size();
+        ih.tickTime = ((float)(ws.getLastTickAvg() / 100000L)) / 10.0F;
+        return ih;
+    }
+
+}
diff --git a/src/main/java/de/minetick/profiler/Profiler.java b/src/main/java/de/minetick/profiler/Profiler.java
index 5e48f78..c3fffa1 100644
--- a/src/main/java/de/minetick/profiler/Profiler.java
+++ b/src/main/java/de/minetick/profiler/Profiler.java
@@ -34,6 +34,20 @@ public class Profiler {
         return this.map.get(ident);
     }
 
+    public WorldProfile getWorldProfile(String ident) {
+        ident = "World_" + ident;
+        Profile p = this.map.get(ident);
+        if(p == null) {
+            int writeSteps = this.writeInterval * 60 / this.logInterval;
+            p = new WorldProfile(this.logInterval, ident, this.avgsTickInterval, this.writeToFile, writeSteps);
+            this.map.put(ident, p);
+        }
+        if(p instanceof WorldProfile) {
+            return (WorldProfile) p;
+        }
+        return null;
+    }
+
     public void start(String ident) {
         Profile p = this.map.get(ident);
         if(p == null) {
diff --git a/src/main/java/de/minetick/profiler/ProfilingComperator.java b/src/main/java/de/minetick/profiler/ProfilingComperator.java
new file mode 100644
index 0000000..c51e941
--- /dev/null
+++ b/src/main/java/de/minetick/profiler/ProfilingComperator.java
@@ -0,0 +1,26 @@
+package de.minetick.profiler;
+
+import java.util.Comparator;
+
+import net.minecraft.server.WorldServer;
+
+public class ProfilingComperator implements Comparator<WorldServer> {
+
+	@Override
+	public int compare(WorldServer o1, WorldServer o2) {
+		long a = o1.getLastTickAvg();
+		long b = o2.getLastTickAvg();
+		/*
+		 * If the last average tick time of a world is greater, it shall be closer
+		 * to the head of the priority queue
+		 */
+		if(a > b) {
+			return -1;
+		}
+		if(a < b) {
+			return 1;
+		}
+		return 0;
+	}
+
+}
diff --git a/src/main/java/de/minetick/profiler/WorldProfile.java b/src/main/java/de/minetick/profiler/WorldProfile.java
new file mode 100644
index 0000000..74ad768
--- /dev/null
+++ b/src/main/java/de/minetick/profiler/WorldProfile.java
@@ -0,0 +1,100 @@
+package de.minetick.profiler;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class WorldProfile extends Profile {
+
+    private final Profile[] profiles;
+    private final WorldProfileSection[] sections;
+
+    public WorldProfile(int size, String ident, int avgMaxCount, boolean writeToFile, int writeSteps) {
+        super(size, ident, avgMaxCount, writeToFile, writeSteps);
+        this.sections = WorldProfileSection.values();
+        this.profiles = new Profile[this.sections.length];
+        for(int i = 0; i < this.sections.length && i < this.profiles.length; i++) {
+            this.profiles[i] = this.sections[i].createSectionProfile(size, ident, avgMaxCount, writeToFile, writeSteps);
+        }
+    }
+
+    public float getLastSectionAvg(WorldProfileSection section) {
+        return this.profiles[section.getIndex()].getLastAvgFloat();
+    }
+
+    @Override
+    public long getLastAvg() {
+        long sum = 0L;
+        for(int i = 0; i < this.profiles.length; i++) {
+            sum += this.profiles[i].getLastAvg();
+        }
+        return sum;
+    }
+
+    public long getLastThreadAvg() {
+        return this.getLastAvg() - this.profiles[WorldProfileSection.DO_TICK.getIndex()].getLastAvg();
+    }
+
+    public void start(WorldProfileSection section) {
+        this.profiles[section.getIndex()].start();
+    }
+
+    public void stop(WorldProfileSection section) {
+        this.profiles[section.getIndex()].stop();
+    }
+
+    @Override
+    public void newTick(int index, int cnt) {
+        for(int i = 0; i < this.profiles.length; i++) {
+            this.profiles[i].newTick(index, cnt);
+        }
+        if(cnt > this.counter) {
+            this.counter = cnt;
+
+            this.calcRecord(false);
+            if(this.writeEnabled) {
+                this.gatherRecords();
+                if((this.counter % this.writeStep) == 0) {
+                    this.writeToFile();
+                }
+            }
+        }
+    }
+
+    private void gatherRecords() {
+        List<String> data = new ArrayList<String>();
+        data.add("Total: " + this.getLastAvgFloat());
+        for(int i = 0; i < this.profiles.length; i++) {
+            data.add(this.sections[i].getEntry() + String.valueOf(this.profiles[i].getLastAvgFloat()));
+        }
+        data.add("Pl: " + this.getPlayerAvg());
+
+        this.addToOutput(this.counter, this.currentTime(), data);
+    }
+
+    public enum WorldProfileSection {
+        DO_TICK(0, "Bl:"),
+        TICK_ENTITIES(1, "Ent:"),
+        TICK_TILEENTITIES(2, "TEnt:"),
+        UPDATE_PLAYERS(3, "PlUpd:");
+
+        private int index;
+        private String logEntry;
+
+        private WorldProfileSection(int index, String logEntry) {
+            this.index = index;
+            this.logEntry = logEntry;
+        }
+
+        public int getIndex() {
+            return this.index;
+        }
+
+        public String getEntry() {
+            return this.logEntry;
+        }
+
+        public Profile createSectionProfile(int size, String ident, int avgMaxCount, boolean writeToFile, int writeSteps) {
+            return new Profile(size, ident + "_" + this.name(), avgMaxCount, writeToFile, writeSteps);
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 7eed46c..fe04e3b 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -31,6 +31,10 @@ import org.bukkit.event.entity.EntityPortalEvent;
 import org.bukkit.plugin.PluginManager;
 // CraftBukkit end
 
+// MinetickMod start
+import de.minetick.MinetickMod;
+// MinetickMod end
+
 public abstract class Entity implements ICommandListener {
 
     // CraftBukkit start
@@ -116,10 +120,22 @@ public abstract class Entity implements ICommandListener {
 
     // MinetickMod start
     private int targetDimension;
+    private Boolean isImportant;
 
     public int getTargetDimension() {
         return this.targetDimension;
     }
+
+    private boolean isPassengerImportant() {
+        return this.passenger != null && this.passenger.isImportantEntity();
+    }
+
+    public boolean isImportantEntity() {
+        if(this.isImportant == null) {
+            this.isImportant = new Boolean(MinetickMod.isImportantEntity(this));
+        }
+        return this.isImportant.booleanValue() || this.isPassengerImportant();
+    }
     // MinetickMod end
 
     public int getId() {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 114888a..274fdc2 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -28,11 +28,14 @@ import java.util.Collections;
 import java.util.Date;
 import java.util.Iterator;
 import java.util.List;
+import java.util.PriorityQueue;
 import java.util.Queue;
 import java.util.Random;
 import java.util.UUID;
 import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
 import java.util.concurrent.FutureTask;
 import javax.imageio.ImageIO;
 import org.apache.commons.lang3.Validate;
@@ -56,7 +59,11 @@ import org.bukkit.event.world.WorldSaveEvent;
 import de.minetick.AutoSaveJob;
 import de.minetick.AutoSaveJob.JobDetail;
 import de.minetick.MinetickMod;
+import de.minetick.WorldTicker;
 import de.minetick.profiler.Profile;
+import de.minetick.profiler.ProfilingComperator;
+import de.minetick.profiler.WorldProfile;
+import de.minetick.profiler.WorldProfile.WorldProfileSection;
 
 import java.util.LinkedList;
 // MinetickMod end
@@ -136,6 +143,9 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     private LinkedList<AutoSaveJob> autoSaveWorlds = new LinkedList<AutoSaveJob>();
     private int autoSaveDelay = 0;
     private boolean autoSaveOrdered = false;
+    private List<Future<?>> worldTickers = new ArrayList<Future<?>>();
+    private WorldServer sortedWorldsArray[] = null;
+    private PriorityQueue<WorldServer> priQueue = new PriorityQueue<WorldServer>(20, new ProfilingComperator());
 
     private void queueWorldsForAutoSave() {
         if (!this.N) {
@@ -173,6 +183,13 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
             ws.cancelHeavyCalculations(cancel);
         }
     }
+
+    private void tickServer() throws ExceptionWorldConflict {
+        this.minetickMod.getProfiler().start("Server");
+        this.A();
+        this.minetickMod.getProfiler().stop("Server").setCurrentPlayerNumber(this.I());
+        this.minetickMod.getProfiler().newTick();
+    }
     // MinetickMod end
 
     public MinecraftServer(OptionSet options, Proxy proxy, File file1) {
@@ -588,13 +605,13 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                     i += k;
                     this.ab = j;
                     if (this.worlds.get(0).everyoneDeeplySleeping()) { // CraftBukkit
-                        this.A();
+                        this.tickServer(); // MinetickMod
                         i = 0L;
                     } else {
                         while (i > 50L) {
                             MinecraftServer.currentTick = (int) (System.currentTimeMillis() / 50); // CraftBukkit
                             i -= 50L;
-                            this.A();
+                            this.tickServer(); // MinetickMod
                         }
                     }
 
@@ -776,6 +793,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 
         int i;
 
+        /*
         for (i = 0; i < this.worlds.size(); ++i) {
             long j = System.nanoTime();
 
@@ -783,6 +801,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                 WorldServer worldserver = this.worlds.get(i);
 
                 this.methodProfiler.a(worldserver.getWorldData().getName());
+        */
                 /* Drop global time updates
                 if (this.ticks % 20 == 0) {
                     this.methodProfiler.a("timeSync");
@@ -791,6 +810,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                 }
                 // CraftBukkit end */
 
+        /*
                 this.methodProfiler.a("tick");
 
                 CrashReport crashreport;
@@ -821,7 +841,63 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
             // this.i[i][this.ticks % 100] = System.nanoTime() - j; // CraftBukkit
         }
 
+        */
         // MinetickMod start
+        int worldCount = this.worlds.size();
+        if(this.sortedWorldsArray == null || this.minetickMod.getProfiler().checkAvgs() ||
+                this.sortedWorldsArray.length != worldCount) {
+            this.priQueue.clear();
+            this.priQueue.addAll(this.worlds);
+            if(this.sortedWorldsArray == null || this.sortedWorldsArray.length < worldCount) {
+                this.sortedWorldsArray = new WorldServer[worldCount];
+            }
+            for(i = 0; i < this.sortedWorldsArray.length; i++) {
+                if(!this.priQueue.isEmpty()) {
+                    this.sortedWorldsArray[i] = this.priQueue.poll();
+                } else {
+                    this.sortedWorldsArray[i] = null;
+                }
+            }
+        }
+
+        this.worldTickers.clear();
+        this.cancelHeavyCalculationsForAllWorlds(false);
+        for(i = 0; i < this.sortedWorldsArray.length; i++) {
+            WorldServer worldserver = this.sortedWorldsArray[i];
+            if(worldserver != null) {
+                WorldTicker worldTicker = worldserver.getWorldTicker(this.minetickMod.getProfiler());
+                WorldProfile worldProfile = worldTicker.getWorldProfile();
+                worldProfile.start(WorldProfileSection.DO_TICK);
+                try {
+                    worldserver.doTick();
+                } catch (Throwable throwable) {
+                    CrashReport crashreport = CrashReport.a(throwable, "Exception ticking world");
+                    worldserver.a(crashreport);
+                    throw new ReportedException(crashreport);
+                }
+                worldProfile.stop(WorldProfileSection.DO_TICK);
+                if(MinetickMod.getConfig().isThreadedWorldsEnabled()) {
+                    this.worldTickers.add(this.minetickMod.tickWorld(worldserver));
+                } else {
+                    worldTicker.run();
+                }
+            } else {
+                break;
+            }
+        }
+        if(MinetickMod.getConfig().isThreadedWorldsEnabled()) {
+            for(Future<?> f: this.worldTickers) {
+                try {
+                    f.get();
+                } catch (InterruptedException e) {
+                    this.h(e.toString());
+                    e.printStackTrace();
+                } catch (ExecutionException e) {
+                    this.h(e.toString());
+                    e.printStackTrace();
+                }
+            }
+        }
         this.minetickMod.cancelTimerTask(false);
 
         for(i = 0; i < this.worlds.size(); ++i) {
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 5c821bd..1dc3b52 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -34,6 +34,9 @@ import org.bukkit.event.weather.ThunderChangeEvent;
 
 // MinetickMod start
 import java.util.Collections;
+import de.minetick.MinetickMod;
+import de.minetick.profiler.WorldProfile;
+import de.minetick.profiler.WorldProfile.WorldProfileSection;
 // MinetickMod end
 
 public abstract class World implements IBlockAccess {
@@ -174,6 +177,7 @@ public abstract class World implements IBlockAccess {
     private Chunk lastChunkAccessed = dummyChunk;
     final Object chunkLock = new Object();
     public ChunkProviderServer chunkProviderServer; // moved here from WorldServer
+    private long lastTickAvg = 0L;
 
     public void queueEntityForDimensionChange(Entity entity) {
         this.dimensionChangeQueue.add(entity);
@@ -187,6 +191,14 @@ public abstract class World implements IBlockAccess {
             iter.remove();
         }
     }
+
+    public void setLastTickAvg(long avg) {
+        this.lastTickAvg = avg;
+    }
+
+    public long getLastTickAvg() {
+        return this.lastTickAvg;
+    }
     // MinetickMod end
 
     public World b() {
@@ -1245,6 +1257,11 @@ public abstract class World implements IBlockAccess {
         this.methodProfiler.a("entities");
         this.methodProfiler.a("global");
 
+        // MinetickMod start
+        WorldProfile worldProfile = MinetickMod.getProfilerStatic().getWorldProfile(this.getWorld().getName());
+        worldProfile.start(WorldProfileSection.TICK_ENTITIES);
+        // MinetickMod end
+
         int i;
         Entity entity;
         CrashReport crashreport;
@@ -1316,7 +1333,11 @@ public abstract class World implements IBlockAccess {
             this.methodProfiler.a("tick");
             if (!entity.dead) {
                 try {
-                    this.g(entity);
+                    // MinetickMod start
+                    if(entity.isImportantEntity() || !this.cancelHeavyCalculations) {
+                        this.g(entity);
+                    }
+                    // MinetickMod end
                 } catch (Throwable throwable1) {
                     crashreport = CrashReport.a(throwable1, "Ticking entity");
                     crashreportsystemdetails = crashreport.a("Entity being ticked");
@@ -1341,6 +1362,11 @@ public abstract class World implements IBlockAccess {
             this.methodProfiler.b();
         }
 
+        // MinetickMod start
+        worldProfile.stop(WorldProfileSection.TICK_ENTITIES);
+        worldProfile.start(WorldProfileSection.TICK_TILEENTITIES);
+        // MinetickMod end
+
         this.methodProfiler.c("blockEntities");
         this.M = true;
         // CraftBukkit start - From below, clean up tile entities before ticking them
@@ -1412,6 +1438,8 @@ public abstract class World implements IBlockAccess {
             this.b.clear();
         }
 
+        worldProfile.stop(WorldProfileSection.TICK_TILEENTITIES); // MinetickMod
+
         this.methodProfiler.b();
         this.methodProfiler.b();
     }
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 4e3e879..e1faa27 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -29,6 +29,11 @@ import org.bukkit.event.block.BlockFormEvent;
 import org.bukkit.event.weather.LightningStrikeEvent;
 // CraftBukkit end
 
+// MinetickMod start
+import de.minetick.WorldTicker;
+import de.minetick.profiler.Profiler;
+// MinetickMod end
+
 public class WorldServer extends World implements IAsyncTaskHandler {
 
     private static final Logger a = LogManager.getLogger();
@@ -54,9 +59,18 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     public final int dimension;
 
     // MinetickMod start
+    private WorldTicker worldTicker;
+
     public void cancelHeavyCalculations(boolean cancel) {
         this.cancelHeavyCalculations = cancel;
     }
+
+    public WorldTicker getWorldTicker(Profiler profiler) {
+        if(this.worldTicker == null) {
+            this.worldTicker = new WorldTicker(this, profiler);
+        }
+        return this.worldTicker;
+    }
     // MinetickMode end
 
     // Add env and gen to constructor
diff --git a/src/main/resources/configurations/minetickmod.yml b/src/main/resources/configurations/minetickmod.yml
index 5931545..3facdd9 100644
--- a/src/main/resources/configurations/minetickmod.yml
+++ b/src/main/resources/configurations/minetickmod.yml
@@ -28,3 +28,4 @@ minetickmod:
     - WITCH
     - ZOMBIE
     bungeeCordSupport: false
+    enableWorldThreading: true
-- 
1.8.3.msysgit.0

