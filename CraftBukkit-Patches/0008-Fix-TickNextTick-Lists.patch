From aeb41e5183db5ad627684157817f2bc75d7080c1 Mon Sep 17 00:00:00 2001
From: Poweruser <poweruser.rs@hotmail.com>
Date: Sun, 19 Apr 2015 15:17:51 +0200
Subject: [PATCH] Fix TickNextTick Lists


diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 40e63fc..dcd359a 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -568,6 +568,12 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         if (this.worldData.getType() == WorldType.DEBUG_ALL_BLOCK_STATES) {
             return false;
         } else {
+            // MinetickMod start
+            if(!this.M.checkConsistency()) {
+                a.warn("TickNextTick list out of synch - World: " + this.getWorld().getName() + ". Recovering...");
+            }
+            // MinetickMod end
+
             int i = this.M.size();
 
             if (false) { // CraftBukkit
@@ -653,9 +659,11 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 iterator = this.M.iterator();
             } else {
                 iterator = this.V.iterator();
+                /* MinetickMod start - Comment out debug spam - This is actually a missed diff in CraftBukkit
                 if (!this.V.isEmpty()) {
                     WorldServer.a.debug("toBeTicked = " + this.V.size());
                 }
+                */
             }
 
             while (iterator.hasNext()) {
@@ -664,6 +672,13 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
                 if (blockposition.getX() >= structureboundingbox.a && blockposition.getX() < structureboundingbox.d && blockposition.getZ() >= structureboundingbox.c && blockposition.getZ() < structureboundingbox.f) {
                     if (flag) {
+                        // MinetickMod start - dont miss to remove the entry from V if iterating over M and vice versa
+                        if(i == 0) {
+                            this.V.remove(nextticklistentry);
+                        } else {
+                            this.M.remove(nextticklistentry);
+                        }
+                        // MinetickMod end
                         // CraftBukkit - use M
                         iterator.remove();
                     }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java b/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java
index 80a5c29..d72e607 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java
@@ -6,15 +6,38 @@ import java.util.Iterator;
 import java.util.Set;
 import java.util.TreeSet;
 
+// MinetickMod start
+import java.util.LinkedHashSet;
+import java.util.PriorityQueue;
+// MinetickMod end
+
 public class HashTreeSet<V> implements Set<V> {
 
-    private HashSet<V> hash = new HashSet<V>();
-    private TreeSet<V> tree = new TreeSet<V>();
+    private LinkedHashSet<V> hash = new LinkedHashSet<V>(); // MinetickMod - HashSet -> LinkedHashSet
+    private PriorityQueue<V> tree = new PriorityQueue<V>(); // MinetickMod - TreeSet -> PriorityQueue
 
     public HashTreeSet() {
 
     }
 
+    // MinetickMod start
+    public boolean checkConsistency() {
+        int sizeHash = hash.size();
+        int sizeQueue = tree.size();
+        if(sizeHash != sizeQueue) {
+            if(sizeHash > sizeQueue) {
+                tree.clear();
+                tree.addAll(hash);
+            } else if(sizeHash < sizeQueue) {
+                hash.clear();
+                hash.addAll(tree);
+            }
+            return false;
+        }
+        return true;
+    }
+    // MinetickMod end
+
     @Override
     public int size() {
         return hash.size();
@@ -111,7 +134,7 @@ public class HashTreeSet<V> implements Set<V> {
     }
 
     public V first() {
-        return tree.first();
+        return tree.peek(); // MinetickMod
     }
 
 }
-- 
1.8.3.msysgit.0

