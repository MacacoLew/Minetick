From 58b802c8fc21cedd5b447e9b0780718e523f7e2a Mon Sep 17 00:00:00 2001
From: Poweruser <poweruser.rs@hotmail.com>
Date: Sun, 22 Mar 2015 15:09:00 +0100
Subject: [PATCH] Thread Local IntCache


diff --git a/src/main/java/net/minecraft/server/IntCache.java b/src/main/java/net/minecraft/server/IntCache.java
index 8167fdd..aaa567f 100644
--- a/src/main/java/net/minecraft/server/IntCache.java
+++ b/src/main/java/net/minecraft/server/IntCache.java
@@ -5,59 +5,77 @@ import java.util.List;
 
 public class IntCache {
 
-    private static int a = 256;
-    private static List<int[]> b = Lists.newArrayList();
-    private static List<int[]> c = Lists.newArrayList();
-    private static List<int[]> d = Lists.newArrayList();
-    private static List<int[]> e = Lists.newArrayList();
+    // MinetickMod start - Made IntCache thread local
+    private static final ThreadLocal<IntCache> caches = new ThreadLocal<IntCache>() {
+        @Override
+        protected IntCache initialValue() {
+            return new IntCache();
+        }
+    };
+
+    private int a = 256;
+    private List<int[]> b = Lists.newArrayList();
+    private List<int[]> c = Lists.newArrayList();
+    private List<int[]> d = Lists.newArrayList();
+    private List<int[]> e = Lists.newArrayList();
+
+    public static int[] a(int i) {
+        return caches.get().aNonStatic(i);
+    }
 
-    public static synchronized int[] a(int i) {
+    public int[] aNonStatic(int i) {
         int[] aint;
 
         if (i <= 256) {
-            if (IntCache.b.isEmpty()) {
+            if (this.b.isEmpty()) {
                 aint = new int[256];
-                IntCache.c.add(aint);
+                this.c.add(aint);
                 return aint;
             } else {
-                aint = (int[]) IntCache.b.remove(IntCache.b.size() - 1);
-                IntCache.c.add(aint);
+                aint = (int[]) this.b.remove(this.b.size() - 1);
+                this.c.add(aint);
                 return aint;
             }
-        } else if (i > IntCache.a) {
-            IntCache.a = i;
-            IntCache.d.clear();
-            IntCache.e.clear();
-            aint = new int[IntCache.a];
-            IntCache.e.add(aint);
+        } else if (i > this.a) {
+            this.a = i;
+            this.d.clear();
+            this.e.clear();
+            aint = new int[this.a];
+            this.e.add(aint);
             return aint;
-        } else if (IntCache.d.isEmpty()) {
-            aint = new int[IntCache.a];
-            IntCache.e.add(aint);
+        } else if (this.d.isEmpty()) {
+            aint = new int[this.a];
+            this.e.add(aint);
             return aint;
         } else {
-            aint = (int[]) IntCache.d.remove(IntCache.d.size() - 1);
-            IntCache.e.add(aint);
+            aint = (int[]) this.d.remove(this.d.size() - 1);
+            this.e.add(aint);
             return aint;
         }
     }
 
-    public static synchronized void a() {
-        if (!IntCache.d.isEmpty()) {
-            IntCache.d.remove(IntCache.d.size() - 1);
+    public static void a() {
+        caches.get().aNonStatic();
+    }
+
+    public void aNonStatic() {
+        if (!this.d.isEmpty()) {
+            this.d.remove(this.d.size() - 1);
         }
 
-        if (!IntCache.b.isEmpty()) {
-            IntCache.b.remove(IntCache.b.size() - 1);
+        if (!this.b.isEmpty()) {
+            this.b.remove(this.b.size() - 1);
         }
 
-        IntCache.d.addAll(IntCache.e);
-        IntCache.b.addAll(IntCache.c);
-        IntCache.e.clear();
-        IntCache.c.clear();
+        this.d.addAll(this.e);
+        this.b.addAll(this.c);
+        this.e.clear();
+        this.c.clear();
     }
 
-    public static synchronized String b() {
-        return "cache: " + IntCache.d.size() + ", tcache: " + IntCache.b.size() + ", allocated: " + IntCache.e.size() + ", tallocated: " + IntCache.c.size();
+    public static String b() {
+        //return "cache: " + IntCache.d.size() + ", tcache: " + IntCache.b.size() + ", allocated: " + IntCache.e.size() + ", tallocated: " + IntCache.c.size();
+        return "debug info is currently not supported";
     }
+    // MinetickMod end
 }
-- 
1.8.3.msysgit.0

